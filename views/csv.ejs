<!DOCTYPE html>
<html>
<head>
  <title>CSV File Content</title>
  <style>
    body {
      background-color: rgba(255, 255, 240);
    }

    table {
      border-collapse: collapse;
    }

    th,
    td {
      padding: 8px;
      border: 1px solid black;
      cursor: pointer;
    }

    tbody tr:nth-child(even) {
      background-color: #f2f2f2;
    }

    tbody tr:last-child {
      border-bottom: none;
    }

    .pagination {
      margin-top: 10px;
    }

    .pagination button {
      padding: 5px 10px;
      margin-right: 5px;
      background-color: aquamarine;
      font-weight: bolder;
    }

    .sort-icon {
      display: inline-block;
      width: 0;
      height: 0;
      border-left: 4px solid transparent;
      border-right: 4px solid transparent;
      margin-left: 5px;
      opacity: 0.5;
    }

    .sort-icon.asc {
      border-bottom: 4px solid black;
      opacity: 1;
    }

    .sort-icon.desc {
      border-top: 4px solid black;
      opacity: 1;
    }

    #chart-container {
      margin-top: 20px;
    }
  </style>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <a href="/"><button style="background-color: aquamarine; margin: 5px;">Go Back</button></a>
</head>
<body>
  <h1>CSV File Content</h1>

  <div>
    <label for="searchInput">Search:</label>
    <input type="text" id="searchInput">
    <button id="searchButton">Search</button>
  </div>

  <% if (rows && rows.length > 0) { %>
    <table>
      <thead>
        <tr>
          <% Object.keys(rows[0]).forEach(function(header) { %>
            <th class="table-header" data-column="<%= header %>">
              <%= header %>
              <span class="sort-icon"></span>
            </th>
          <% }) %>
        </tr>
      </thead>
      <tbody>
        <% rows.forEach(function(row, rowIndex) { %>
          <tr class="table-row">
            <% Object.entries(row).forEach(function([key, value], columnIndex) { %>
              <td><div style="border: 1px solid black; padding: 4px;"><%= value %></div></td>
            <% }) %>
          </tr>
        <% }) %>
      </tbody>
    </table>
  <% } else { %>
    <p>No CSV file content to display.</p>
  <% } %>

  <div class="pagination">
    <% for (let i = 1; i <= Math.ceil(rows.length / 100); i++) { %>
      <button class="page-button" data-page="<%= i %>"><%= i %></button>
    <% } %>
  </div>

  <div id="chart-container"></div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('searchInput');
      const searchButton = document.getElementById('searchButton');
      const tableRows = document.querySelectorAll('.table-row');
      const tableHeaders = document.querySelectorAll('.table-header');

      const recordsPerPage = 100;
      let currentPage = 1;
      let currentSortColumn = '';
      let isSortAscending = true;

      const pageButtons = document.querySelectorAll('.page-button');
      const chartContainer = document.getElementById('chart-container');
      let chart = null;

      searchButton.addEventListener('click', function() {
        const searchText = searchInput.value.trim().toLowerCase();
        if (searchText === '') {
          resetSearch();
        } else {
          filterRows(searchText);
        }
      });

      tableHeaders.forEach(function(header) {
        header.addEventListener('click', function() {
          const column = header.dataset.column;
          if (column === currentSortColumn) {
            isSortAscending = !isSortAscending;
          } else {
            currentSortColumn = column;
            isSortAscending = true;
          }
          sortRows();
          updateTableDisplay();
        });
      });

      pageButtons.forEach(function(button) {
        button.addEventListener('click', function() {
          const page = parseInt(button.dataset.page);
          currentPage = page;
          updateTableDisplay();
        });
      });

      function filterRows(searchText) {
        tableRows.forEach(function(row) {
          const cells = row.querySelectorAll('td');
          let rowMatch = false;
          cells.forEach(function(cell) {
            if (cell.textContent.toLowerCase().includes(searchText)) {
              rowMatch = true;
            }
          });
          if (rowMatch) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
        currentPage = 1; // Reset current page when performing a search
        updateTableDisplay();
      }

      function resetSearch() {
        tableRows.forEach(function(row) {
          row.style.display = '';
        });
        currentPage = 1; // Reset current page when clearing the search
        updateTableDisplay();
      }

      function sortRows() {
        const sortedRows = Array.from(tableRows).sort(function(row1, row2) {
          const value1 = row1.querySelectorAll('td')[getColumnIndex(currentSortColumn)].textContent;
          const value2 = row2.querySelectorAll('td')[getColumnIndex(currentSortColumn)].textContent;
          if (isSortAscending) {
            return value1.localeCompare(value2);
          } else {
            return value2.localeCompare(value1);
          }
        });
        const tbody = document.querySelector('tbody');
        sortedRows.forEach(function(row) {
          tbody.appendChild(row);
        });
      }

      function getColumnIndex(column) {
        const headers = document.querySelectorAll('.table-header');
        let index = 0;
        headers.forEach(function(header, i) {
          if (header.dataset.column === column) {
            index = i + 1;
          }
        });
        return index;
      }

      function updateTableDisplay() {
        const startIndex = (currentPage - 1) * recordsPerPage;
        const endIndex = startIndex + recordsPerPage;

        tableRows.forEach(function(row, index) {
          if (index >= startIndex && index < endIndex) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });

        pageButtons.forEach(function(button) {
          const page = parseInt(button.dataset.page);
          if (page === currentPage) {
            button.style.fontWeight = 'bold';
          } else {
            button.style.fontWeight = 'normal';
          }
        });

        tableHeaders.forEach(function(header) {
          const column = header.dataset.column;
          if (column === currentSortColumn) {
            const sortIcon = header.querySelector('.sort-icon');
            sortIcon.classList.remove('asc', 'desc');
            if (isSortAscending) {
              sortIcon.classList.add('asc');
            } else {
              sortIcon.classList.add('desc');
            }
          } else {
            const sortIcon = header.querySelector('.sort-icon');
            sortIcon.classList.remove('asc', 'desc');
          }
        });
      }

      function drawChart(column) {
        const data = new google.visualization.DataTable();
        data.addColumn('string', 'Value');
        data.addColumn('number', 'Count');

        const countMap = new Map();
        tableRows.forEach(function(row) {
          const value = row.querySelectorAll('td')[getColumnIndex(column)].textContent;
          if (countMap.has(value)) {
            countMap.set(value, countMap.get(value) + 1);
          } else {
            countMap.set(value, 1);
          }
        });

        countMap.forEach(function(count, value) {
          data.addRow([value, count]);
        });

        const options = {
          title: 'Column Chart',
          width: '100%',
          height: 400,
          legend: { position: 'none' },
          chartArea: { left: 50, top: 50, right: 20, bottom: 100 },
        };

        if (chart) {
          chart.clearChart();
        }

        chart = new google.visualization.ColumnChart(chartContainer);
        chart.draw(data, options);
      }

      google.charts.load('current', { packages: ['corechart'] });
      google.charts.setOnLoadCallback(function() {
        drawChart(''); // Draw initial chart with an empty column
      });

      updateTableDisplay(); // Initial table display update
    });
  </script>
</body>
</html>
